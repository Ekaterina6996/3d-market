services:
  # API Gateway
  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    ports:
      - "3000:3000"
    networks:
      - app-network
    restart: unless-stopped

  # User Service
  user-service:
    build: ./services/user-service
    container_name: user-service
    environment:
      DATABASE_URL: "postgresql://user:password@user-db:5432/users"
      JWT_SECRET: "YOUR_SUPER_SECRET_KEY_REPLACE_IT"
    depends_on:
      - user-db
    networks:
      - app-network
    restart: unless-stopped

  # User Service Database
  user-db:
    image: postgres:14-alpine
    container_name: user-db
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: users
    volumes:
      - user-db-data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: unless-stopped

  # Project Service
  project-service:
    build: ./services/project-service
    container_name: project-service
    environment:
      DATABASE_URL: "postgresql://user:password@project-db:5432/projects"
      JWT_SECRET: "YOUR_SUPER_SECRET_KEY_REPLACE_IT"
    volumes:
      - uploads:/app/uploads
    depends_on:
      - project-db
    networks:
      - app-network
    restart: unless-stopped

  # Project Service Database
  project-db:
    image: postgres:14-alpine
    container_name: project-db
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: projects
    volumes:
      - project-db-data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: unless-stopped

  # Frontend
  frontend:
    build: ./frontend
    container_name: frontend
    ports:
      - "8080:80"
    depends_on:
      - api-gateway
    networks:
      - app-network
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  user-db-data:
  project-db-data:
  uploads: